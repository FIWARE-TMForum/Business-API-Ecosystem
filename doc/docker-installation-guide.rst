------------------------
Installation with Docker
------------------------

The installation with Docker requires the following:

* `Docker <https://docs.docker.com/engine/install/>`__
* `Docker Compose <https://docs.docker.com/compose/install/>`__

As stated, the Business API Ecosystem in made up of a set of different components which work jointly in order to provide
the functionality. In this regard the following images have been defined:

* fiware/biz-ecosystem-apis: This image includes all the TMForum APIs and can be found in `Docker Hub <https://hub.docker.com/r/fiware/biz-ecosystem-apis/>`__
* fiware/biz-ecosystem-charging-backend: This image includes the Charging Backend component and can be found in `Docker Hub <https://hub.docker.com/r/fiware/biz-ecosystem-charging-backend/>`__
* fiware/biz-ecosystem-logic-proxy: This image includes the Logic Proxy component and can be found in `Docker Hub <https://hub.docker.com/r/fiware/biz-ecosystem-logic-proxy/>`__
* fiware/biz-ecosystem-rss: This Image include the Revenue Sharing Component and can be found in `Docker Hub <https://hub.docker.com/r/fiware/biz-ecosystem-rss/>`__

Local BAE deployment
====================

The easiest way to deploy the Business API Ecosystem with Docker is using *Docker Compose*. There have been created
a docker compose file that allows to deploy the Business API Ecosystem locally.
Such a file can be found `here <https://github.com/FIWARE-TMForum/local-bae>`__

The local BAE repository deploys all the BAE components as well as a Keyrock instance that can be used as IDM.
By default, local BAE requires an external network called *bae* that will be used by the different BAE components
for communications. That network can be created with the following command: ::

    docker network create bae

As an alternative, local BAE can be configured using the bridge driver, meaning that the different components
will be assigned a port in the host machine and a local IP to access them. The bridge mode can be enabled
uncommeting driver and IP configuration: ::

    networks:
        bae:
            name: bae
            external: false
            driver: bridge
            ipam:
            config:
              - subnet: 10.2.0.0/16

The BAE can be launched with: ::

    docker compose up -d

And terminated with: ::

    docker compose down

The local BAE repository includes database initializations that will create a Marketplace application within Keyrock
and having some pre-configured settings. In this regard, the local BAE will be ready to use in a local environment
without further configuration.

As soon as the Logic Proxy component of the BAE is healthy, the marketplace page can be accessed in the 8004 of the
host machine. The login can be done through the pre-configured Keyrock IDP using the initial test credentials: ::

    Username: admin@test.com
    Password: admin

New users can be created directly in the Keyrock instance available in the port 8080 of the host machine.

The configuration of the BAE can be updated using environment variables by updating the .env file or the
environment files included in envs/ directory. For details on the different configuration options please
refer to the `Configuration Guide <doc:configuration-guide>`__

Data storage
============

The different images used as part of the Business API Ecosystem provide several volumes. Following 
it is described the different options available in each image.

The **biz-ecosystem-logic-proxy** image defines 2 volumes. In particular:

* */business-ecosystem-logic-proxy/themes*: This volume includes the different themes that can be used to customize the portal
* */business-ecosystem-logic-proxy/static*: This volume includes the static files ready to be rendered including the selected theme and js files

Additionally, the **biz-ecosystem-logic-proxy** image defines two environment variables intended to optimize the production deployment of the BAE Logic proxy:

* *NODE_ENV*: Specifies whether the system is in *development* or in *production* (default: development)
* *COLLECT*: Specifies if the container should execute the collect static command to generate static files or use the existing on start up (default: True)

On the other hand, the **biz-ecosystem-charging-backend** image defines 4 volumes. In particular:

* */business-ecosystem-charging-backend/src/media/bills*: This directory contains the PDF invoices generated by the Business Ecosystem Charging Backend
* */business-ecosystem-charging-backend/src/media/assets*: This directory contains the different digital assets uploaded by sellers to the Business Ecosystem Charging Backend
* */business-ecosystem-charging-backend/src/plugins*: This directory is used for providing asset plugins (see section *Installing Asset Plugins*)
* */business-ecosystem-charging-backend/src/wstore/asset_manager/resource_plugins/plugins*: This directory includes the code of the plugins already installed


Installing Asset Plugins
========================

As you may know, the Business API Ecosystem is able to sell different types of digital assets
by loading asset plugins in its Charging Backend. In this context, it is possible to install
asset plugins in the current Docker image as follows:

1) Copy the plugin file into the host directory of the volume */business-ecosystem-charging-backend/src/plugins*

2) Access the running container: ::

    docker exec -i -t your-container bash


3) Go to the installation directory ::

    cd /business-ecosystem-charging-backend/src


4) Load the plugin ::

    python3 manage.py loadplugin ./plugins/pluginfile.zip


5) Restart the docker image ::

    docker compose restart bae-charging